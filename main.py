
from bokeh.models import HoverTool
from bokeh.plotting import figure
from bokeh.transform import cumsum
import functions as fu
import streamlit as st
import numpy as np


# streamlit config
st.set_page_config(
    layout="wide",page_title="VG Data explorer",page_icon="./img/logo.png",
    initial_sidebar_state="auto",menu_items=None)

# load local css
fu.local_css("style.css")

# load and prepare data
data = fu.load_prepare_csv("./data/vgsales.csv")



# app header
with st.container(height=200, border=False):
    st.write("# Video game\n## Data explorer")


# show raw data
with st.container(border=True):
    
    data_info="""
    
    Name -> The games name
    
    Platform -> Platform of the games release (i.e. PC,PS4, etc.)
    
    Year -> Year of the game's release
    
    Genre -> Genre of the game
    
    Publisher -> Publisher of the game
    
    NA_Sales -> Sales in North America (in millions)
    
    EU_Sales -> Sales in Europe (in millions)
    
    JP_Sales -> Sales in Japan (in millions)
    
    Other_Sales -> Sales in the rest of the world (in millions)
    
    Global_Sales -> Total worldwide sales"""
    
    # column selection by user
    selected_col = st.multiselect(label="Quick view of the dataset:", options=data.columns, 
                                  default=list(data.columns), help=data_info)
    
    # show raw data
    with st.container(border=False):
        st.write(data.loc[:5, selected_col])
    
    # data details
    with st.expander("More details"):
        st.markdown(f"""
        ###### This dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.
        \r###### Fields include:
        {data_info}""")
        st.write(data.describe())
        st.markdown("###### Dataset source: https://www.kaggle.com/datasets/gregorut/videogamesales")


# plots
with st.container(border=True):
    
    # prepare data
    publisher = "Nintendo"
    
    top_sales ,years = fu.top_sales_of_year(data, publisher)
    publisher_games = data[data["Publisher"] == publisher]
    t15_publisher_games = data[(data["Publisher"] == publisher) & (data["Rank"] <= 15)]
    publisher_g_each_y = fu.games_each_year(data, years, publisher)
    publisher_n_games_in_genre = fu.games_in_each_genre(data,publisher)
    
    avg_gs = np.average(list(data.loc[2:19, "Global_Sales"]))
    top_g = data.loc[data["Rank"]==1]
    totalg_publisher = publisher_games["Name"].nunique()
    
    
    
    # p setup
    p1 = figure(title="Top 20 Best-Selling Video Games", x_axis_label="Name", y_axis_label="Global Sales (Millions)", x_range=list(data.loc[:19, "Name"]), tools="box_select,pan,wheel_zoom,reset,save")
    p2 = figure(title=f"{publisher} Games", y_axis_label="Global Sales (Millions)", x_axis_label="Year", tools="crosshair,box_select,pan,wheel_zoom,lasso_select,reset,save")
    p3 = figure(title=f"{publisher} game releases", y_axis_label="Games", x_axis_label="Year", tools="crosshair,pan,wheel_zoom,reset,save")
    p4 = figure(height=350, title="Number of game releases in each genre", toolbar_location=None,tools="hover", tooltips="@genre: @games", x_range=(-0.5, 1.0))
    
    # p customize
    p1.add_tools(HoverTool(tooltips=[("Name","@Name"),("Global Sales","@Global_Sales"),("Publisher","@Publisher"),("Genre","@Genre"),("Year","@Year"),("Rank","@Rank")]))
    p2.add_tools(HoverTool(tooltips=[("Name","@Name"),("Global Sales","@Global_Sales"),("Publisher","@Publisher"),("Genre","@Genre"),("Year","@Year")]))
    p3.add_tools(HoverTool(tooltips=[("Games", "@games"), ("Year", "@year"), ("Genres", "@genres")]))
    
    p1.toolbar_location, p2.toolbar_location, p3.toolbar_location= "above", "above", "above"
    
    
    
    # p1
    p1.vbar(top="Global_Sales", x="Name",source=data, width=0.5, fill_color="#B04CCB")
    p1.xaxis.major_label_orientation = 3.14/5.5
    
    
    # p2
    p2.line(x=years, y=top_sales, color="#0063d8")
    p2.square(x=years, y=top_sales, fill_color="#b800cf", line_color="#b800cf", size=7, legend_label="Best seller of the year")
    p2.square(source=publisher_games, x="Year", y="Global_Sales", legend_label=f"{publisher} games")
    p2.hex(source=t15_publisher_games, x="Year", y="Global_Sales", size=7, fill_color="#00d7ff", line_color="#0000", legend_label="Top 15 by Rank")
    
    
    # p3
    p3.vbar(source=publisher_g_each_y, x="year", top="games", width=0.5, fill_color="#000")
    p3.line(source=publisher_g_each_y, x="year", y="games", line_width=3, line_color="#00d7ff", legend_label="Games each year")
    
    
    # p4
    p4.wedge(x=0.2, y=1, radius=0.13,start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),line_color="white", fill_color='color', legend_field='genre', source=publisher_n_games_in_genre)
    p4.axis.axis_label, p4.grid.grid_line_color = None, None
    p4.axis.visible = False
    
    
    
    # show plots
    st.write("First lets see the top 20 best-selling games:")
    
    st.bokeh_chart(p1, use_container_width=True)
    
    st.write(f"""
        Ranks from 20 to 2 had an average of __{avg_gs:.2f}M__ Global sales;
        \rBut '__{top_g["Name"][0]}__' had __{top_g["Global_Sales"][0]}M__ Sales!
        \rThis chart shows other popular games from {top_g["Publisher"][0]}, {top_g["Name"][0]}'s publisher:""")
    
    st.bokeh_chart(p2, use_container_width=True)
    
    st.write(f"As you can see between 2005 and 2010, __{top_g['Publisher'][0]}__ did really well and after the release of __{top_g['Name'][0]}__ They entered the top 15 more than before.")
    st.write(f"This publisher has made {totalg_publisher} games in total, so let's see how many games they made each year:")
    
    st.bokeh_chart(p3, use_container_width=True)
    st.bokeh_chart(p4, use_container_width=True)
    
    st.write(f"According to the plot, __{top_g['Name'][0]}__ made 57 games in 2004, Thats __6.3X__ or __533%__ more games than 2003!")
    st.write(f"And top 3 genres are: {fu.t3_genres(publisher_n_games_in_genre)}")

